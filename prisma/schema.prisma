generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Address {
  id         String   @id
  userId     String
  street     String
  city       String
  state      String
  zipCode    String
  created_at DateTime @default(now())
  updated_at DateTime
  User       User     @relation(fields: [userId], references: [id])
}

model Cart {
  id         String     @id
  userId     String
  created_at DateTime   @default(now())
  updated_at DateTime
  User       User       @relation(fields: [userId], references: [id])
  CartItem   CartItem[]
}

model CartItem {
  id         String   @id
  cartId     String
  productId  String
  created_at DateTime @default(now())
  updated_at DateTime
  Cart       Cart     @relation(fields: [cartId], references: [id])
  Product    Product  @relation(fields: [productId], references: [id])
}

model Categories {
  id      String    @id
  name    String    @unique
  image   String
  Product Product[]
}

model Likes {
  id         String   @id
  reviewId   String
  created_at DateTime @default(now())
  updated_at DateTime
  Reviews    Reviews  @relation(fields: [reviewId], references: [id], onDelete: Cascade)
}

model Product {
  id                   String          @id
  description          String
  sku                  String          @unique
  categoryId           String
  images               String[]
  average_ratings      Int?
  created_at           DateTime        @default(now())
  updated_at           DateTime
  name                 String
  price                Float
  price_after_discount Float
  status               ProductStatus   @default(AVAILABLE)
  CartItem             CartItem[]
  Categories           Categories      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  Reviews              Reviews[]
  Variant              Variant[]
  WhishListItem        WhishListItem[]
}

model Reviews {
  id         String   @id
  title      String
  comment    String
  productId  String
  rating     Int
  created_at DateTime @default(now())
  updated_at DateTime
  Likes      Likes[]
  Product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model User {
  id               String      @id
  name             String
  display_name     String?
  email            String      @unique
  password         String
  passwordChangeAt DateTime?
  profileImage     String?
  role             String      @default("user")
  otp              String?
  otp_expires_at   String?
  created_at       DateTime    @default(now())
  updatedAt        DateTime
  Address          Address[]
  Cart             Cart[]
  WhishList        WhishList[]
}

model Variant {
  id         String  @id
  productId  String
  attributes Json
  image      String?
  stock      Int     @default(0)
  price      Float?
  sku        String?
  Product    Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model WhishList {
  id            String          @id
  userId        String
  created_at    DateTime        @default(now())
  updated_at    DateTime
  User          User            @relation(fields: [userId], references: [id])
  WhishListItem WhishListItem[]
}

model WhishListItem {
  id          String    @id
  whishListId String
  productId   String
  created_at  DateTime  @default(now())
  updated_at  DateTime
  Product     Product   @relation(fields: [productId], references: [id])
  WhishList   WhishList @relation(fields: [whishListId], references: [id])
}

enum ProductStatus {
  AVAILABLE
  OUT_OF_STOCK
  DISCONTINUED
}
