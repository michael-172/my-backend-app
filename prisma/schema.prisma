// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String      @id @default(uuid())
  name             String
  display_name     String?
  email            String      @unique
  password         String
  passwordChangeAt DateTime?
  profileImage     String?
  role             String      @default("user")
  otp              String?
  otp_expires_at   String?
  createdAt        DateTime    @default(now()) @map("created_at")
  updatedAt        DateTime    @updatedAt
  cart             Cart[]
  WhishList        WhishList[]
  Address          Address[]
  Reviews          Reviews[]
}

model Categories {
  id       String    @id @default(uuid())
  name     String    @unique
  image    String
  products Product[]
}

enum ProductStatus {
  AVAILABLE
  OUT_OF_STOCK
  DISCONTINUED
}

model Product {
  id                 String          @id @default(uuid())
  name               String
  price              String
  priceAfterDiscount String          @map("price_after_discount")
  description        String
  sku                String          @unique
  categoryId         String
  images             String[]
  category           Categories      @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reviews            Reviews[]
  average_ratings    Int?
  cart_items         CartItem[]
  createdAt          DateTime        @default(now()) @map("created_at")
  updatedAt          DateTime        @updatedAt @map("updated_at")
  WhishListItem      WhishListItem[]
  variants           Variant[]
  status             ProductStatus   @default(AVAILABLE)
}

model Variant {
  id         String     @id @default(uuid())
  productId  String
  product    Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  attributes Json // e.g. { "Color": "Red", "Size": "M" }
  image      String?
  stock      Int        @default(0)
  price      String?
  sku        String?
  CartItem   CartItem[]
}

model Reviews {
  id        String   @id @default(uuid())
  title     String
  comment   String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  likes     Likes[]
  rating    Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Likes {
  id        String   @id @default(uuid())
  reviewId  String
  reviews   Reviews  @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Cart {
  id         String     @id @default(uuid())
  userId     String     @unique
  User       User       @relation(fields: [userId], references: [id])
  cart_items CartItem[]
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  Cart      Cart     @relation(fields: [cartId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  variantId String
  variant   Variant  @relation(fields: [variantId], references: [id])
  quantity  Int      @default(1)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model WhishList {
  id             String          @id @default(uuid())
  userId         String
  User           User            @relation(fields: [userId], references: [id])
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  WhishListItems WhishListItem[]
}

model WhishListItem {
  id          String    @id @default(uuid())
  whishListId String
  WhishList   WhishList @relation(fields: [whishListId], references: [id])
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
}

model Address {
  id        String   @id @default(uuid())
  userId    String
  User      User     @relation(fields: [userId], references: [id])
  street    String
  city      String
  state     String
  zipCode   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}
