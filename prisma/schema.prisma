generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int         @id @default(autoincrement())
  name             String
  display_name     String?
  email            String      @unique
  password         String
  passwordChangeAt DateTime?
  profileImage     String?
  role             String      @default("user")
  otp              String?
  otp_expires_at   String?
  createdAt        DateTime    @default(now()) @map("created_at")
  updatedAt        DateTime    @updatedAt
  cart             Cart[]
  WhishList        WhishList[]
  Address          Address[]
  Reviews          Reviews[]
}

model Categories {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  image    String
  products Product[]
}

enum ProductStatus {
  AVAILABLE
  OUT_OF_STOCK
  DISCONTINUED
}

model Product {
  id                 Int                @id @default(autoincrement())
  name               String
  price              Decimal            @db.Decimal(10, 2)
  priceAfterDiscount Decimal?           @map("price_after_discount") @db.Decimal(10, 2)
  description        String
  sku                String             @unique
  categoryId         Int
  images             String[]
  category           Categories         @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reviews            Reviews[]
  average_ratings    Int?
  cart_items         CartItem[]
  createdAt          DateTime           @default(now()) @map("created_at")
  updatedAt          DateTime           @updatedAt @map("updated_at")
  WhishListItem      WhishListItem[]
  status             ProductStatus      @default(AVAILABLE)
  attributes         ProductAttribute[]
  variations         ProductVariation[]
}

model ProductAttribute {
  id        Int              @id @default(autoincrement())
  name      String
  productId Int
  product   Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  values    AttributeValue[]
}

model AttributeValue {
  id                  Int                  @id @default(autoincrement())
  value               String
  productAttributeId  Int
  productAttribute    ProductAttribute     @relation(fields: [productAttributeId], references: [id], onDelete: Cascade)
  variationAttributes VariationAttribute[]
}

model ProductVariation {
  id         Int                  @id @default(autoincrement())
  sku        String
  price      Float
  stock      Int
  productId  Int
  product    Product              @relation(fields: [productId], references: [id], onDelete: Cascade)
  attributes VariationAttribute[]
  cartItems  CartItem[]
}

model VariationAttribute {
  id                 Int              @id @default(autoincrement())
  attributeValueId   Int
  attributeValue     AttributeValue   @relation(fields: [attributeValueId], references: [id], onDelete: Cascade)
  productVariationId Int
  productVariation   ProductVariation @relation(fields: [productVariationId], references: [id], onDelete: Cascade)
}

model Reviews {
  id        Int      @id @default(autoincrement())
  title     String
  comment   String
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  likes     Likes[]
  rating    Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Likes {
  id        Int      @id @default(autoincrement())
  reviewId  Int
  reviews   Reviews  @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Cart {
  id         Int        @id @default(autoincrement())
  userId     Int        @unique
  User       User       @relation(fields: [userId], references: [id])
  cart_items CartItem[]
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")
}

model CartItem {
  id                 Int               @id @default(autoincrement())
  cartId             Int
  Cart               Cart              @relation(fields: [cartId], references: [id])
  productId          Int
  product            Product           @relation(fields: [productId], references: [id])
  productVariationId Int?
  productVariation   ProductVariation? @relation(fields: [productVariationId], references: [id])
  quantity           Int               @default(1)
  createdAt          DateTime          @default(now()) @map("created_at")
  updatedAt          DateTime          @updatedAt @map("updated_at")
}

model WhishList {
  id             Int             @id @default(autoincrement())
  userId         Int
  User           User            @relation(fields: [userId], references: [id])
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  WhishListItems WhishListItem[]
}

model WhishListItem {
  id          Int       @id @default(autoincrement())
  whishListId Int
  WhishList   WhishList @relation(fields: [whishListId], references: [id])
  productId   Int
  product     Product   @relation(fields: [productId], references: [id])
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
}

model Address {
  id        Int      @id @default(autoincrement())
  userId    Int
  User      User     @relation(fields: [userId], references: [id])
  street    String
  city      String
  state     String
  zipCode   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}
